import React, { useState, useEffect, useCallback, useMemo } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  RefreshControl,
  Modal,
  FlatList,
  Dimensions,
  KeyboardAvoidingView,
  Platform,
} from "react-native";
import { router } from "expo-router";
import {
  Search,
  Filter,
  Plus,
  MessageCircle,
  Heart,
  Share2,
  MoreVertical,
  Clock,
  TrendingUp,
  Star,
  ThumbsUp,
  BookOpen,
  Users,
  HelpCircle,
  X,
  Send,
  ChevronRight,
  Calendar,
  Eye,
  Award,
  AlertCircle,
} from "lucide-react-native";
import Colors from "@/constants/colors";
import { useAuth } from "@/context/AuthContext";
import { useCommunity } from "@/context/CommunityContext";
import { useSubscription } from "@/context/SubscriptionContext";
import Button from "@/components/Button";
import faqs from "@/constants/faqs";

type FilterCategory = "All" | "Application" | "Fitness" | "Testing" | "Training" | "General";
type SortOption = "recent" | "popular" | "trending" | "most_liked";

type KnowledgeBaseItem = {
  id: string;
  title: string;
  content: string;
  category: string;
  tags: string[];
  views: number;
  helpful: number;
  created_at: string;
};

export default function CommunityScreen() {
  const [activeTab, setActiveTab] = useState<'faq' | 'community' | 'knowledge'>('faq');
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<FilterCategory>("All");
  const [sortBy, setSortBy] = useState<SortOption>("recent");
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [newPostContent, setNewPostContent] = useState("");
  const [newPostCategory, setNewPostCategory] = useState<FilterCategory>("General");
  const [showComments, setShowComments] = useState<string | null>(null);
  const [loadingComments, setLoadingComments] = useState<Record<string, boolean>>({});
  const [newComment, setNewComment] = useState("");
  const [refreshing, setRefreshing] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  
  const { user, isAdmin } = useAuth();
  const { posts, isLoading: postsLoading, createPost, togglePostLike, addComment, loadComments } = useCommunity();
  const { subscription } = useSubscription();
  const [postComments, setPostComments] = useState<Record<string, any[]>>({});

  // Mock knowledge base data - reduced to most relevant items
  const knowledgeBaseItems: KnowledgeBaseItem[] = useMemo(() => [
    {
      id: '1',
      title: 'Complete PREP Test Guide',
      content: 'Everything you need to know about the PREP test, including requirements, training tips, and what to expect on test day.',
      category: 'Testing',
      tags: ['PREP', 'fitness', 'testing'],
      views: 1250,
      helpful: 89,
      created_at: '2024-01-01',
    },
    {
      id: '2',
      title: 'OACP Application Process',
      content: 'Step-by-step guide to completing your OACP certificate application and what documents you need.',
      category: 'Application',
      tags: ['OACP', 'application', 'certificate'],
      views: 890,
      helpful: 67,
      created_at: '2024-01-05',
    },
    {
      id: '3',
      title: 'Interview Preparation Tips',
      content: 'How to prepare for police interviews, common questions, and how to present yourself professionally.',
      category: 'Application',
      tags: ['interview', 'preparation', 'tips'],
      views: 1100,
      helpful: 92,
      created_at: '2024-01-10',
    },
  ], []);

  const categories: FilterCategory[] = useMemo(() => [
    "All",
    "Application",
    "Fitness",
    "Testing",
    "Training",
    "General",
  ], []);

  const sortOptions: { value: SortOption; label: string; icon: any }[] = useMemo(() => [
    { value: 'recent', label: 'Recent', icon: Clock },
    { value: 'popular', label: 'Popular', icon: TrendingUp },
    { value: 'trending', label: 'Trending', icon: Star },
    { value: 'most_liked', label: 'Most Liked', icon: ThumbsUp },
  ], []);

  // Memoize filtered data to prevent unnecessary re-computations
  const filteredFAQs = useMemo(() => {
    return faqs.filter((faq: any) => {
      const matchesSearch =
        faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
        faq.answer.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesCategory =
        selectedCategory === "All" || faq.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
  }, [faqs, searchQuery, selectedCategory]);

  const filteredPosts = useMemo(() => {
    return posts.filter((post) => {
      const matchesSearch = post.content.toLowerCase().includes(searchQuery.toLowerCase());
      
      // Map post_type to category for filtering
      const categoryMap: Record<string, FilterCategory> = {
        'question': 'Application',
        'achievement': 'General',
        'tip': 'General',
        'discussion': 'General',
        'fitness': 'Fitness',
        'testing': 'Testing',
      };
      
      const postCategory = categoryMap[post.post_type || 'discussion'] || 'General';
      const matchesCategory = selectedCategory === "All" || postCategory === selectedCategory;
      
      return matchesSearch && matchesCategory;
    });
  }, [posts, searchQuery, selectedCategory]);

  const filteredKnowledgeBase = useMemo(() => {
    return knowledgeBaseItems.filter((item) => {
      const matchesSearch = 
        item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
      const matchesCategory = selectedCategory === "All" || item.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
  }, [knowledgeBaseItems, searchQuery, selectedCategory]);

  const handleCreatePost = async () => {
    if (!newPostContent.trim()) {
      Alert.alert('Error', 'Please enter some content for your post');
      return;
    }
    await createPost(newPostContent, newPostCategory);
    setNewPostContent('');
    setShowCreatePost(false);
  };

  const handleAddComment = async (postId: string) => {
    if (!newComment.trim()) return;
    const comment = await addComment(postId, newComment);
    if (comment) {
      setPostComments(prev => ({
        ...prev,
        [postId]: [...(prev[postId] || []), {
          ...comment,
          user_name: (comment.profiles as any)?.full_name || user?.full_name || 'Anonymous',
          user_avatar: (comment.profiles as any)?.avatar_url || user?.avatar_url || undefined,
          isLiked: false,
        }]
      }));
    }
    setNewComment('');
  };

  const handleToggleComments = async (postId: string) => {
    if (showComments === postId) {
      setShowComments(null);
      return;
    }

    setShowComments(postId);
    
    if (!postComments[postId]) {
      setLoadingComments(prev => ({ ...prev, [postId]: true }));
      const comments = await loadComments(postId);
      setPostComments(prev => ({ ...prev, [postId]: comments }));
      setLoadingComments(prev => ({ ...prev, [postId]: false }));
    }
  };

  const handleReportPost = (postId: string) => {
    Alert.alert(
      'Report Post',
      'Are you sure you want to report this post?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Report',
          style: 'destructive',
          onPress: () => {
            Alert.alert('Success', 'Post reported successfully');
          },
        },
      ]
    );
  };

  const handleDeletePost = (postId: string) => {
    Alert.alert(
      'Delete Post',
      'Are you sure you want to delete this post? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: () => {
            Alert.alert('Success', 'Post deleted successfully');
          },
        },
      ]
    );
  };

  const onRefresh = async () => {
    setRefreshing(true);
    // Refresh data
    setTimeout(() => setRefreshing(false), 1000);
  };

  const formatTimeAgo = (timestamp: string) => {
    const now = new Date();
    const time = new Date(timestamp);
    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
    return `${Math.floor(diffInMinutes / 1440)}d ago`;
  };

  const formatNumber = (num: number) => {
    if (num >= 1000) return `${(num / 1000).toFixed(1)}k`;
    return num.toString();
  };

  return (
    <View style={styles.container}>
      {/* Enhanced Tab-Specific Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Community</Text>
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <Users size={16} color={Colors.warning} />
            <Text style={styles.statValue}>{posts.length + 150}</Text>
            <Text style={styles.statLabel}>Active Members</Text>
          </View>
          <View style={styles.statItem}>
            <MessageCircle size={16} color={Colors.primary} />
            <Text style={styles.statValue}>
              {posts.filter(p => {
                const today = new Date();
                const postDate = new Date(p.created_at);
                return postDate.toDateString() === today.toDateString();
              }).length}
            </Text>
            <Text style={styles.statLabel}>Posts Today</Text>
          </View>
          <View style={styles.statItem}>
            <ThumbsUp size={16} color={Colors.success} />
            <Text style={styles.statValue}>
              {posts.reduce((sum, post) => sum + ((post as any).likes || 0), 0)}
            </Text>
            <Text style={styles.statLabel}>Helpful Answers</Text>
          </View>
        </View>
      </View>

      {/* Tab Selector */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'faq' && styles.activeTab]}
          onPress={() => setActiveTab('faq')}
        >
          <Text style={[styles.tabText, activeTab === 'faq' && styles.activeTabText]}>
            FAQ
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'community' && styles.activeTab]}
          onPress={() => setActiveTab('community')}
        >
          <Text style={[styles.tabText, activeTab === 'community' && styles.activeTabText]}>
            Community
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'knowledge' && styles.activeTab]}
          onPress={() => setActiveTab('knowledge')}
        >
          <Text style={[styles.tabText, activeTab === 'knowledge' && styles.activeTabText]}>
            Knowledge Base
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.searchContainer}>
        <View style={styles.searchInputContainer}>
          <Search size={20} color={Colors.textSecondary} />
          <TextInput
            style={styles.searchInput}
            placeholder={
              activeTab === 'faq' ? "Search FAQs..." : 
              activeTab === 'knowledge' ? "Search knowledge base..." : 
              "Search posts..."
            }
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor={Colors.textSecondary}
          />
        </View>
        <TouchableOpacity 
          style={styles.filterButton}
          onPress={() => setShowFilters(!showFilters)}
        >
          <Filter size={20} color={Colors.primary} />
        </TouchableOpacity>
      </View>

      {showFilters && (
        <View style={styles.filtersContainer}>
          <View style={styles.filterSection}>
            <Text style={styles.filterLabel}>Category</Text>
            <ScrollView
              horizontal
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={styles.categoriesList}
            >
              {categories.map((category) => (
                <TouchableOpacity
                  key={category}
                  style={[
                    styles.categoryButton,
                    selectedCategory === category && styles.selectedCategoryButton,
                  ]}
                  onPress={() => setSelectedCategory(category)}
                >
                  <Text
                    style={[
                      styles.categoryButtonText,
                      selectedCategory === category &&
                        styles.selectedCategoryButtonText,
                    ]}
                  >
                    {category}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          {activeTab === 'community' && (
            <View style={styles.filterSection}>
              <Text style={styles.filterLabel}>Sort By</Text>
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={styles.sortOptionsList}
              >
                {sortOptions.map((option) => {
                  const Icon = option.icon;
                  return (
                    <TouchableOpacity
                      key={option.value}
                      style={[
                        styles.sortOptionButton,
                        sortBy === option.value && styles.selectedSortOption,
                      ]}
                      onPress={() => setSortBy(option.value)}
                    >
                      <Icon size={16} color={sortBy === option.value ? Colors.white : Colors.textSecondary} />
                      <Text
                        style={[
                          styles.sortOptionText,
                          sortBy === option.value && styles.selectedSortOptionText,
                        ]}
                      >
                        {option.label}
                      </Text>
                    </TouchableOpacity>
                  );
                })}
              </ScrollView>
            </View>
          )}
        </View>
      )}

      <ScrollView
        style={styles.contentContainer}
        contentContainerStyle={styles.contentList}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {activeTab === 'faq' ? (
          <>
            <Text style={styles.sectionTitle}>Frequently Asked Questions</Text>
            <Text style={styles.sectionDescription}>
              Find answers to common questions about becoming a police officer in Ontario
            </Text>
            {filteredFAQs.map((faq: any) => (
              <View key={faq.id} style={styles.faqItem}>
                <Text style={styles.faqQuestion}>{faq.question}</Text>
                <Text style={styles.faqAnswer}>{faq.answer}</Text>
              </View>
            ))}
            {filteredFAQs.length === 0 && (
              <View style={styles.noResultsContainer}>
                <Text style={styles.noResultsText}>
                  No FAQs found. Try adjusting your search or category filter.
                </Text>
              </View>
            )}
          </>
        ) : activeTab === 'knowledge' ? (
          <>
            <Text style={styles.sectionTitle}>Knowledge Base</Text>
            <Text style={styles.sectionDescription}>
              Comprehensive guides and resources to help you succeed
            </Text>
            {filteredKnowledgeBase.map((item) => (
              <TouchableOpacity key={item.id} style={styles.knowledgeCard}>
                <View style={styles.knowledgeHeader}>
                  <View style={styles.knowledgeInfo}>
                    <Text style={styles.knowledgeTitle}>{item.title}</Text>
                    <Text style={styles.knowledgeContent}>{item.content}</Text>
                    <View style={styles.knowledgeMeta}>
                      <View style={styles.knowledgeMetaItem}>
                        <BookOpen size={14} color={Colors.textSecondary} />
                        <Text style={styles.knowledgeMetaText}>{formatNumber(item.views)} views</Text>
                      </View>
                      <View style={styles.knowledgeMetaItem}>
                        <ThumbsUp size={14} color={Colors.textSecondary} />
                        <Text style={styles.knowledgeMetaText}>{formatNumber(item.helpful)} helpful</Text>
                      </View>
                      <View style={styles.knowledgeMetaItem}>
                        <Clock size={14} color={Colors.textSecondary} />
                        <Text style={styles.knowledgeMetaText}>{formatTimeAgo(item.created_at)}</Text>
                      </View>
                    </View>
                  </View>
                  <TouchableOpacity style={styles.bookmarkButton}>
                    <Star size={20} color={Colors.textSecondary} />
                  </TouchableOpacity>
                </View>
                <View style={styles.knowledgeTags}>
                  {item.tags.map((tag) => (
                    <View key={tag} style={styles.knowledgeTag}>
                      <Text style={styles.knowledgeTagText}>#{tag}</Text>
                    </View>
                  ))}
                </View>
              </TouchableOpacity>
            ))}
            {filteredKnowledgeBase.length === 0 && (
              <View style={styles.noResultsContainer}>
                <Text style={styles.noResultsText}>
                  No knowledge base articles found. Try adjusting your search or category filter.
                </Text>
              </View>
            )}
          </>
        ) : (
          <>
            <View style={styles.createPostContainer}>
              <TouchableOpacity
                style={styles.createPostButton}
                onPress={() => setShowCreatePost(true)}
              >
                <Plus size={20} color={Colors.primary} />
                <Text style={styles.createPostText}>Share your experience or ask a question</Text>
              </TouchableOpacity>
            </View>

            <Text style={styles.sectionTitle}>Community Posts</Text>
            <Text style={styles.sectionDescription}>
              Connect with fellow aspiring officers and share your journey
            </Text>
            {filteredPosts.map((post) => (
              <View key={post.id} style={styles.postCard}>
                <View style={styles.postHeader}>
                  <View style={styles.postUserInfo}>
                    <View style={styles.avatar}>
                      <Text style={styles.avatarText}>{(post.user_name || 'Anonymous').charAt(0).toUpperCase()}</Text>
                    </View>
                    <View>
                      <Text style={styles.userName}>{post.user_name || 'Anonymous'}</Text>
                      <Text style={styles.postTime}>{formatTimeAgo(post.created_at)}</Text>
                    </View>
                  </View>
                  <View style={styles.postActions}>
                    <View style={styles.categoryBadge}>
                      <Text style={styles.categoryBadgeText}>{post.post_type || 'General'}</Text>
                    </View>
                    <TouchableOpacity style={styles.postMenuButton}>
                      <MoreVertical size={16} color={Colors.textSecondary} />
                    </TouchableOpacity>
                  </View>
                </View>
                <Text style={styles.postContent}>{post.content}</Text>
                <View style={styles.postActions}>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => togglePostLike(post.id)}
                  >
                    <Heart
                      size={18}
                      color={post.isLiked ? Colors.red : Colors.textSecondary}
                      fill={post.isLiked ? Colors.red : 'none'}
                    />
                    <Text style={styles.actionText}>{post.likes_count}</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => handleToggleComments(post.id)}
                  >
                    <MessageCircle size={18} color={Colors.textSecondary} />
                    <Text style={styles.actionText}>{post.comments_count}</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.actionButton}>
                    <Share2 size={18} color={Colors.textSecondary} />
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={styles.actionButton}
                    onPress={() => handleReportPost(post.id)}
                  >
                    <AlertCircle size={18} color={Colors.textSecondary} />
                  </TouchableOpacity>
                  {isAdmin() && (
                    <TouchableOpacity 
                      style={styles.actionButton}
                      onPress={() => handleDeletePost(post.id)}
                    >
                      <X size={18} color={Colors.error} />
                    </TouchableOpacity>
                  )}
                </View>
                {showComments === post.id && (
                  <View style={styles.commentsSection}>
                    {loadingComments[post.id] ? (
                      <Text style={styles.noResultsText}>Loading comments...</Text>
                    ) : (
                      (postComments[post.id] || []).map((comment) => (
                        <View key={comment.id} style={styles.comment}>
                          <View style={styles.commentHeader}>
                            <View style={styles.smallAvatar}>
                              <Text style={styles.smallAvatarText}>{(comment.user_name || 'Anonymous').charAt(0).toUpperCase()}</Text>
                            </View>
                            <Text style={styles.commentUserName}>{comment.user_name || 'Anonymous'}</Text>
                            <Text style={styles.commentTime}>{formatTimeAgo(comment.created_at)}</Text>
                          </View>
                          <Text style={styles.commentContent}>{comment.content}</Text>
                        </View>
                      ))
                    )}
                    <View style={styles.addCommentContainer}>
                      <TextInput
                        style={styles.commentInput}
                        placeholder="Add a comment..."
                        value={newComment}
                        onChangeText={setNewComment}
                        placeholderTextColor={Colors.textSecondary}
                        multiline
                      />
                      <TouchableOpacity
                        style={styles.sendButton}
                        onPress={() => handleAddComment(post.id)}
                      >
                        <Send size={16} color={Colors.primary} />
                      </TouchableOpacity>
                    </View>
                  </View>
                )}
              </View>
            ))}
            {postsLoading && (
              <View style={styles.noResultsContainer}>
                <Text style={styles.noResultsText}>
                  Loading posts...
                </Text>
              </View>
            )}
            {!postsLoading && filteredPosts.length === 0 && (
              <View style={styles.noResultsContainer}>
                <Text style={styles.noResultsText}>
                  No posts found. Be the first to share your experience!
                </Text>
              </View>
            )}
          </>
        )}
      </ScrollView>

      <Modal
        visible={showCreatePost}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <TouchableOpacity onPress={() => setShowCreatePost(false)}>
              <X size={24} color={Colors.text} />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Create Post</Text>
            <TouchableOpacity onPress={handleCreatePost}>
              <Text style={styles.postButton}>Post</Text>
            </TouchableOpacity>
          </View>
          <View style={styles.modalContent}>
            <View style={styles.categorySelector}>
              <Text style={styles.categorySelectorLabel}>Category:</Text>
              <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                {categories.filter(cat => cat !== 'All').map((category) => (
                  <TouchableOpacity
                    key={category}
                    style={[
                      styles.modalCategoryButton,
                      newPostCategory === category && styles.selectedModalCategory,
                    ]}
                    onPress={() => setNewPostCategory(category)}
                  >
                    <Text
                      style={[
                        styles.modalCategoryText,
                        newPostCategory === category && styles.selectedModalCategoryText,
                      ]}
                    >
                      {category}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
            <TextInput
              style={styles.postInput}
              placeholder="Share your experience, ask a question, or offer advice to fellow aspiring officers..."
              value={newPostContent}
              onChangeText={setNewPostContent}
              multiline
              textAlignVertical="top"
              placeholderTextColor={Colors.textSecondary}
            />
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  header: {
    padding: 16,
    backgroundColor: Colors.white,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: Colors.white,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  tab: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderBottomWidth: 2,
    borderBottomColor: 'transparent',
  },
  activeTab: {
    borderBottomColor: Colors.primary,
  },
  tabText: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.textSecondary,
  },
  activeTabText: {
    color: Colors.primary,
    fontWeight: '600',
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    color: Colors.text,
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    paddingBottom: 8,
    backgroundColor: Colors.white,
  },
  searchInputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: Colors.gray[100],
    borderRadius: 8,
    paddingHorizontal: 12,
    height: 40,
    flex: 1,
  },
  searchInput: {
    flex: 1,
    marginLeft: 8,
    fontSize: 16,
    color: Colors.text,
  },
  filterButton: {
    padding: 8,
  },
  filtersContainer: {
    backgroundColor: Colors.white,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  filterSection: {
    paddingHorizontal: 16,
    marginBottom: 16,
  },
  filterLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  categoriesList: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  categoryButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: Colors.gray[100],
    marginRight: 8,
  },
  selectedCategoryButton: {
    backgroundColor: Colors.primary,
  },
  categoryButtonText: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  selectedCategoryButtonText: {
    color: Colors.white,
    fontWeight: "500",
  },
  sortOptionsList: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  sortOptionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: Colors.gray[100],
    marginRight: 8,
  },
  selectedSortOption: {
    backgroundColor: Colors.primary,
  },
  sortOptionText: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginLeft: 8,
  },
  selectedSortOptionText: {
    color: Colors.white,
    fontWeight: "500",
  },
  contentContainer: {
    flex: 1,
  },
  contentList: {
    padding: 16,
  },
  createPostContainer: {
    marginBottom: 16,
  },
  createPostButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.white,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  createPostText: {
    marginLeft: 12,
    fontSize: 16,
    color: Colors.textSecondary,
    flex: 1,
  },
  postCard: {
    backgroundColor: Colors.white,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  postUserInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.primary,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  avatarText: {
    color: Colors.white,
    fontWeight: 'bold',
    fontSize: 16,
  },
  userName: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.text,
  },
  postTime: {
    fontSize: 12,
    color: Colors.textSecondary,
    marginTop: 2,
  },
  postActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  categoryBadge: {
    backgroundColor: Colors.primary + '20',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  categoryBadgeText: {
    fontSize: 12,
    color: Colors.primary,
    fontWeight: '500',
  },
  postMenuButton: {
    padding: 8,
  },
  postContent: {
    fontSize: 16,
    color: Colors.text,
    lineHeight: 22,
    marginBottom: 12,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  actionText: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  commentsSection: {
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: Colors.border,
  },
  comment: {
    marginBottom: 12,
  },
  commentHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  smallAvatar: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: Colors.secondary,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 8,
  },
  smallAvatarText: {
    color: Colors.white,
    fontWeight: 'bold',
    fontSize: 12,
  },
  commentUserName: {
    fontSize: 12,
    fontWeight: '600',
    color: Colors.text,
    marginRight: 8,
  },
  commentTime: {
    fontSize: 11,
    color: Colors.textSecondary,
  },
  commentContent: {
    fontSize: 14,
    color: Colors.text,
    lineHeight: 18,
    marginLeft: 32,
  },
  addCommentContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    gap: 8,
    marginTop: 8,
  },
  commentInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: Colors.border,
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 14,
    color: Colors.text,
    maxHeight: 80,
  },
  sendButton: {
    padding: 8,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 0,
    backgroundColor: Colors.primary,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.white,
  },
  postButton: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.white,
  },
  modalContent: {
    flex: 1,
    padding: 16,
  },
  categorySelector: {
    marginBottom: 16,
  },
  categorySelectorLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  modalCategoryButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    backgroundColor: Colors.gray[100],
    marginRight: 8,
  },
  selectedModalCategory: {
    backgroundColor: Colors.primary,
  },
  modalCategoryText: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  selectedModalCategoryText: {
    color: Colors.white,
  },
  postInput: {
    flex: 1,
    fontSize: 16,
    color: Colors.text,
    textAlignVertical: 'top',
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: Colors.text,
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 16,
    lineHeight: 20,
  },
  noResultsContainer: {
    alignItems: "center",
    justifyContent: "center",
    padding: 24,
  },
  noResultsText: {
    fontSize: 16,
    color: Colors.textSecondary,
    textAlign: "center",
  },
  knowledgeCard: {
    backgroundColor: Colors.white,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  knowledgeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  knowledgeInfo: {
    flex: 1,
  },
  knowledgeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
    marginBottom: 4,
  },
  knowledgeContent: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 8,
  },
  knowledgeMeta: {
    flexDirection: 'row',
    gap: 12,
  },
  knowledgeMetaItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  knowledgeMetaText: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  bookmarkButton: {
    padding: 8,
  },
  knowledgeTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  knowledgeTag: {
    backgroundColor: Colors.primary + '10',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
  },
  knowledgeTagText: {
    fontSize: 12,
    color: Colors.primary,
    fontWeight: '500',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: Colors.text,
    marginBottom: 12,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 8,
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
    marginTop: 4,
  },
  statLabel: {
    fontSize: 12,
    color: Colors.textSecondary,
    marginTop: 2,
  },
  faqItem: {
    backgroundColor: Colors.white,
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  faqQuestion: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  faqAnswer: {
    fontSize: 14,
    color: Colors.textSecondary,
    lineHeight: 20,
  },
});